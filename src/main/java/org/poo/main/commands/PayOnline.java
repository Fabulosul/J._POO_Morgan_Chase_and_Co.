package org.poo.main.commands;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.Getter;
import lombok.Setter;
import org.poo.fileio.CommandInput;
import org.poo.main.bank.Bank;
import org.poo.main.bankaccounts.BankAccount;
import org.poo.main.bankaccounts.BusinessAccount;
import org.poo.main.card.Card;
import org.poo.main.transaction.Transaction;
import org.poo.main.user.User;
import org.poo.main.cashback.Commerciant;
import org.poo.main.cashback.PaymentDetails;


@Getter
@Setter
public final class PayOnline extends Command implements CommandInterface {
    private Bank bank;
    private ArrayNode output;

    public PayOnline(final Bank bank, final CommandInput command, final ArrayNode output) {
        super(command);
        this.bank = bank;
        this.output = output;
    }

    /**
     * Method overridden from the CommandInterface to make an online payment with a card.
     * It gets the user by email, the card by card number and the bank account by card number
     * by calling appropriate methods from the bank.
     * Then, it checks if the card is frozen and if it is, it registers a transaction with the
     * description "The card is frozen".
     * If the card is not frozen, it tries to make the payment by calling the payOnline method
     * from the bank account which returns a boolean indicating if the payment was
     * successful or not. If the payment is successful, it registers a transaction with the
     * description "Card payment", otherwise it registers a transaction with the description
     * "Insufficient funds".
     * If the card used to make the payment is a oneTime card, that card is destroyed,
     * a new card is generated by calling the regenerateCard method
     * and both of these actions are registered as transactions in the
     * user and bank account transaction lists.
     * Also, after the payment is made, it checks if the user can be auto-upgraded to a premium
     * account by calling the checkForAutoUpgrade method from the user.
     * Finally, if the payment was successful, it checks if the user is a business user
     * and if it is, it registers a transaction with the description "spend" in the business
     * account transaction list.
     * During this whole process, if the user, the bank account or the card associated with the
     * card number are not found, the method returns without doing anything.
     *
     * @see User#checkForAutoUpgrade(BankAccount, double, int) for more details about the
     * auto-upgrade process
     */
    @Override
    public void execute() {
        User user = bank.getUserByMail(getEmail());
        if (user == null) {
            return;
        }
        Card card = bank.getCardByCardNr(getCardNumber());
        if (card == null) {
            addErrorToOutput();
            return;
        }
        BankAccount bankAccount = bank.getAccountByCardNr(getCardNumber());
        if (bankAccount == null) {
            return;
        }

        if (!isCardOwner(bankAccount, user)) {
            return;
        }

        if (card.isFrozen()) {
            registerTransaction(user, bankAccount, card, "The card is frozen");
            return;
        }
        if (getAmount() <= 0) {
            return;
        }
        boolean hasSufficientFunds =
                bankAccount.payWithCommission(bank, getAmount(), getCurrency());
        if (hasSufficientFunds) {
            registerTransaction(user, bankAccount, card, "Card payment");
            regenerateCard(card, bankAccount, user);
            for (Commerciant commerciant : bankAccount.getCommerciants()) {
                if (commerciant.getName().equals(getCommerciant())) {
                    PaymentDetails paymentDetails =
                            new PaymentDetails(getAmount(), getCurrency(), commerciant, user);
                    bankAccount.notifyCashbackObservers(paymentDetails);
                    break;
                }
            }
            double amountInRon = bank.convertCurrency(getAmount(), getCurrency(),
                    "RON");
            user.checkForAutoUpgrade(bankAccount, amountInRon, getTimestamp());
        } else {
            registerTransaction(user, bankAccount, card, "Insufficient funds");
        }
    }

    /**
     * Method that checks if the user is the owner of the card used to make the payment.
     * Eseentially, it checks if the bank account is a business account and if the user is
     * a business user. If the user is not a business user, it adds an error message to the
     * output array and returns false.
     *
     * @param bankAccount -> the bank account used to make the payment
     * @param user -> the user that tries to make the payment
     * @return true if the user is the owner of the card, false otherwise
     */
    private boolean isCardOwner(final BankAccount bankAccount, final User user) {
        if (bankAccount.getAccountType().equals("business")
                && !((BusinessAccount) bankAccount).isBusinessUser(user)) {
            ObjectMapper mapper = new ObjectMapper();
            ObjectNode objectNode = mapper.createObjectNode();

            objectNode.put("command", "payOnline");
            ObjectNode outputNode = mapper.createObjectNode();
            outputNode.put("description", "Card not found");
            outputNode.put("timestamp", getTimestamp());

            objectNode.set("output", outputNode);
            objectNode.put("timestamp", getTimestamp());

            output.add(objectNode);
            return false;
        }
        return true;
    }

    /**
     * Method used to regenerate a card if it is a oneTime card.
     * It removes the card from the bank account card list and registers a transaction with the
     * description "The card has been destroyed".
     * Then, it creates a new card and adds it to the bank account card list and registers a
     * transaction with the description "New card created".
     *
     * @param card -> the card that needs to be regenerated
     * @param bankAccount -> the bank account that the card is associated with
     * @param user -> the user that the card is associated with
     */
    private void regenerateCard(final Card card, final BankAccount bankAccount, final User user) {
        if (card.isOneTimeCard()) {
            bankAccount.removeCard(card);
            registerTransaction(user, bankAccount, card,
                    "The card has been destroyed");

            Card newCard = new Card("oneTime");
            bankAccount.addCard(newCard);
            registerTransaction(user, bankAccount, newCard, "New card created");
        }
    }

    /**
     * Method used to register a transaction based on a given description.
     * The method creates a transaction object based on the description and adds it
     * to the corresponding user or bank account transaction lists and sometimes both.
     *
     * @param user -> the user that the transaction is registered to
     * @param bankAccount -> the bank account that the transaction is registered to
     * @param card -> the card that the transaction is registered to
     * @param description -> the description of the transaction used to determine the type of
     *                    transaction that is registered
     */
    private void registerTransaction(final User user, final BankAccount bankAccount,
                                    final Card card, final String description) {
        Transaction transaction;
        switch (description) {
            case "The card is frozen":
                transaction = new Transaction
                        .TransactionBuilder(getTimestamp(), description)
                        .build();
                user.addTransaction(transaction);
                break;
            case "Card payment":
                double convertedAmount = bank.convertCurrency(getAmount(), getCurrency(),
                        bankAccount.getCurrency());
                transaction = new Transaction
                        .TransactionBuilder(getTimestamp(), description)
                        .amount(convertedAmount)
                        .commerciant(getCommerciant())
                        .build();
                user.addTransaction(transaction);
                bankAccount.addTransaction(transaction);
                if (bankAccount.getAccountType().equals("business")) {
                    Transaction businessTransaction = new Transaction
                            .TransactionBuilder(getTimestamp(), "spend")
                            .amount(convertedAmount)
                            .username(user.getLastName() + " " + user.getFirstName())
                            .commerciant(getCommerciant())
                            .build();
                    ((BusinessAccount) bankAccount).addBusinessTransaction(businessTransaction);
                }
                break;
            case "The card has been destroyed":
                transaction = new Transaction
                        .TransactionBuilder(getTimestamp(), description)
                        .cardHolder(getEmail())
                        .card(card.getCardNumber())
                        .account(bankAccount.getIban())
                        .build();
                user.addTransaction(transaction);
                break;
            case "New card created":
                transaction = new Transaction
                        .TransactionBuilder(getTimestamp(), description)
                        .account(bankAccount.getIban())
                        .cardHolder(getEmail())
                        .card(card.getCardNumber())
                        .build();
                user.addTransaction(transaction);
                break;
                case "Insufficient funds":
                    transaction = new Transaction
                            .TransactionBuilder(getTimestamp(), description)
                            .build();
                    user.addTransaction(transaction);
                    bankAccount.addTransaction(transaction);
                    break;
            default:
                break;
        }
    }

    /**
     * Method used to add an error message to the output array when the
     * card on which the payment is made is not found.
     * It creates an object node with the wanted information and adds it to the output array.
     */
    private void addErrorToOutput() {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode objectNode = mapper.createObjectNode();
        objectNode.put("command", "payOnline");

        ObjectNode outputNode = mapper.createObjectNode();
        outputNode.put("description", "Card not found");
        outputNode.put("timestamp", getTimestamp());

        objectNode.set("output", outputNode);

        objectNode.put("timestamp", getTimestamp());

        output.add(objectNode);
    }
}
